package org.broadinstitute.hellbender.tools.exome;

import org.broadinstitute.hellbender.cmdline.*;
import org.broadinstitute.hellbender.cmdline.programgroups.CopyNumberProgramGroup;
import org.broadinstitute.hellbender.exceptions.UserException;

import java.io.File;
import java.io.IOException;
import java.util.List;

/**
 * Calls segments as amplified, deleted, or copy number neutral given files containing tangent-normalized
 * read counts by target and a list of segments
 *
 * @author David Benjamin
 */
@CommandLineProgramProperties(
        summary = "Call segments as amplified, deleted, or copy number neutral given files containing tangent-normalized" +
                " read counts by target and a list of segments",
        oneLineSummary = "Call segments as amplified, deleted, or copy number neutral",
        programGroup = CopyNumberProgramGroup.class
)
public final class CallSegments extends CommandLineProgram{

    protected static final String Z_THRESHOLD_SHORT_NAME = "Z";
    protected static final String Z_THRESHOLD_LONG_NAME = "threshold";

    protected static final String EXPERIMENTAL_CALLER_SHORT_NAME = "e";
    protected static final String EXPERIMENTAL_CALLER_LONG_NAME = "experimental";

    @Argument(
            doc = "normalized read counts input file.",
            shortName = ExomeStandardArgumentDefinitions.TARGET_FILE_SHORT_NAME,
            fullName = ExomeStandardArgumentDefinitions.TARGET_FILE_LONG_NAME,
            optional = false
    )
    protected File normalizedCoveragedFile;

    @Argument(
            doc = "segments files",
            shortName = ExomeStandardArgumentDefinitions.SEGMENT_FILE_SHORT_NAME,
            fullName = ExomeStandardArgumentDefinitions.SEGMENT_FILE_LONG_NAME,
            optional = false
    )
    protected File segmentsFile;

    @Argument(
            doc = "Called segments output",
            shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME,
            fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,
            optional = false
    )
    protected File outFile;

    @Argument(
            doc = "(Advanced) Number of standard deviations of targets' coverage a segment mean must deviate from copy neutral"
            + " to be considered an amplification or deletion.  This parameter controls the trade-off between"
            + " sensitivity and specificity, with smaller values favoring sensitivity.\n"
            + " NOTE: This option is ignored unless using the experimental caller (-" + EXPERIMENTAL_CALLER_SHORT_NAME + ").",
            shortName = Z_THRESHOLD_SHORT_NAME,
            fullName = Z_THRESHOLD_LONG_NAME,
            optional = true
    )
    protected double zThreshold = CnvCaller.DEFAULT_Z_SCORE_THRESHOLD;

    @Argument(
            doc = "(Advanced) Assume that the input seg file is using the legacy format (e.g. generated by python ReCapSeg)."
            + "  NOTE:  The output will be in the format used by this program -- i.e. no preservation of legacy field names, etc.",
            shortName = ExomeStandardArgumentDefinitions.LEGACY_SEG_FILE_SHORT_NAME,
            fullName = ExomeStandardArgumentDefinitions.LEGACY_SEG_FILE_LONG_NAME,
            optional = true
    )
    protected boolean isLegacyFormatSegFile = false;

    @Argument(
            doc = "(Advanced and Experimental) Use the new hellbender caller.  This will take in the new segment file format."
            + "  No need to call with legacy format.",
            shortName = EXPERIMENTAL_CALLER_SHORT_NAME,
            fullName = EXPERIMENTAL_CALLER_LONG_NAME,
            optional = true
    )
    protected boolean useExperimentalCaller = false;

    @Override
    protected Object doWork() {
        final ReadCountCollection normalizedCoverage;
        try {
            normalizedCoverage = ReadCountCollectionUtils.parse(normalizedCoveragedFile);
        } catch (final IOException e) {
            throw new UserException.CouldNotReadInputFile(normalizedCoveragedFile, e);
        }
        List<ModeledSegment> segments = isLegacyFormatSegFile ? SegmentUtils.readModeledSegmentsFromLegacySegmentFile(segmentsFile) :
               SegmentUtils.readModeledSegmentsFromSegmentFile(segmentsFile);

        //add calls to segments in-place
        if (useExperimentalCaller) {
            CnvCaller.makeCalls(normalizedCoverage, segments, zThreshold);
        } else {
            ReCapSegCaller.makeCalls(normalizedCoverage, segments);
        }

        final String sample = ReadCountCollectionUtils.getSampleNameForCLIsFromReadCountsFile(normalizedCoveragedFile);
        SegmentUtils.writeModeledSegmentFile(outFile, segments, sample);
        return "SUCCESS";
    }
}
